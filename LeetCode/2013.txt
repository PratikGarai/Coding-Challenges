class DetectSquares(object):

    def __init__(self):
        self.grid = [[0 for i in range(1001)] for j in range(1001)]
        self.tlim = 1000
        self.llim = 1000
        self.rlim = 0
        self.dlim = 0

    def add(self, point):
        x,y = point
        self.grid[x][y] += 1
        
        self.tlim = min(self.tlim, y)
        self.dlim = max(self.dlim, y)
        self.llim = min(self.llim, x)
        self.rlim = max(self.rlim, x)

    def count(self, point):
        x, y = point
        t = [x, y-1]
        d = [x, y+1]
        l = [x-1, y]
        r = [x+1, y]
        sq = 0
        while t[1]>=self.tlim or d[1]<=self.dlim or l[0]>=self.llim or r[0]<=self.rlim:
            
            if t[1]>=0 and l[0]>=0 :
                if self.grid[t[0]][t[1]]>0 and self.grid[l[0]][l[1]]>0 and self.grid[l[0]][t[1]]>0 :
                    sq += self.grid[t[0]][t[1]] * self.grid[l[0]][l[1]] * self.grid[l[0]][t[1]]
            
            if t[1]>=0 and r[0]<1001 :
                if self.grid[t[0]][t[1]]>0 and self.grid[r[0]][r[1]]>0 and self.grid[r[0]][t[1]]>0 :
                    sq += self.grid[t[0]][t[1]] * self.grid[r[0]][r[1]] * self.grid[r[0]][t[1]]
            
            if d[1]<1001 and l[0]>=0 :
                if self.grid[d[0]][d[1]]>0 and self.grid[l[0]][l[1]]>0 and self.grid[l[0]][d[1]]>0 :
                    sq += self.grid[d[0]][d[1]] * self.grid[l[0]][l[1]] * self.grid[l[0]][d[1]]
                          
            if d[1]<1001 and r[0]<1001 :
                if self.grid[d[0]][d[1]]>0 and self.grid[r[0]][l[1]]>0 and self.grid[r[0]][d[1]]>0 :
                    sq += self.grid[d[0]][d[1]] * self.grid[r[0]][r[1]] * self.grid[r[0]][d[1]]   
            
            t[1]-=1
            d[1]+=1
            l[0]-=1
            r[0]+=1
            
        return sq
