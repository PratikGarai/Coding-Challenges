class Solution:
    def countPrimes(self, n: int) -> int:
        
        if n<=2:
            return 0
        
        l = [True for i in range(n)]
        count = 0
        l[2] = True
        
        for i in range(2,n):
            if l[i]:
                count += 1
                
            mul = 2
            while(i*mul<n):
                l[i*mul] = False
                mul += 1
        
        return count


===================  ALTERNATIVE SOLUTION  ========================

class Solution:
    def countPrimes(self, n: int) -> int:
        
        if n<=2:
            return 0
        
        count = 0
        isPrime = True
        l = []
        
        for i in range(2,n):
            isPrime = True
            max = (i**0.5)
            for j in l:
                if j>max:
                    break
                if i%j==0:
                    isPrime = False
                    break
            if isPrime :
                l.append(i)
                count += 1
        
        return count
                
=====================  FASTEST I MANAGED TO DO YET ====================

class Solution:
    def countPrimes(self, n: int) -> int:
        if n<=2:
            return 0
        l = [1 for i in range(n)]
        l[2] = 1
        l[0], l[1] = 0, 0
        for i in range(2,n):       
            for j in range(i**2, n, i):
                l[j] = 0
        
        return sum(l)
