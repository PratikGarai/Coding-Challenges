class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        
        if amount==0:
            return 1
        
        self.mem = {}
        self.coins = sorted(coins)
        c = 0
        for i in self.coins:
            c += self.count(amount-i,i)
        return c
    
    def count(self, amount, limit):
        if amount==0 :
            return 1
        if amount<0 :
            return 0
        
        if (amount,limit) in self.mem :
            return self.mem[(amount,limit)]
        
        s = 0
        for i in self.coins:
            if i>limit :
                break
            s += self.count(amount-i, i)
            self.mem[(amount,limit)] = s
        return s


==================================  SOLUTION 2  =========================================

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        
        if amount==0 :
            return 1
        if coins==[]:
            return 0
        
        l = len(coins)
        coins = sorted(coins)
        dp = [[0 for i in range(amount+1)] for j in range(l)]
        
        for i in range(l):
            
            dp[i][0] = 1
            for j in range(1,amount+1):
                dp[i][j] = dp[i-1][j]
                if j-coins[i]>=0:
                    dp[i][j] += dp[i][j-coins[i]]
        
        return dp[l-1][amount]

===================================  SOLUTION 3  =========================================

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        
        if amount==0 :
            return 1
        if coins==[]:
            return 0
        
        dp = [0 for i in range(amount+1)]
        dp[0] = 1
        
        for i in coins:
            for j in range(1,amount+1):
                if j >= i:
                    dp[j] += dp[j - i]
        
        return dp[amount]
