class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        
        ans = ListNode(-1)
        
        l = 0
        curr = head
        while curr : 
            l += 1
            curr = curr.next
        
        prev = ans
        
        for j in range(l//k) :
            l = []
            for i in range(k) :
                l.append(head)
                head = head.next
            
            l = l[::-1]
            nxt = l[0].next
            
            for i in range(k-1) :
                l[i].next = l[i+1]
            
            prev.next = l[0]
            l[-1].next = nxt
            prev = l[-1]
        
        return ans.next

================================================================================================

class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        
        l = 0
        curr = head
        while curr : 
            l += 1
            curr = curr.next
        
        ans = ListNode(-1)
        ans.next = head
        prev = ans
        
        for j in range(l//k) :
            f1 = prev
            f2 = f1.next
            
            l1 = prev
            l2 = l1.next
            
            def recur(prev2, node, level) : 
                nonlocal f1, f2
                if level == k : 
                    return
                recur(node, node.next, level+1)
                t = k//2 
                if k%2 == 0 : 
                    t -= 1
                if level > t :
                    prev2.next = f2
                    f1.next = node
                    nxt = node.next
                    node.next = f2.next
                    f2.next = nxt
                    f1 = f1.next
                    f2 = f1.next
            
            recur(l1, l2, 0)
            for i in range(k) :
                prev = prev.next
            
        return ans.next
